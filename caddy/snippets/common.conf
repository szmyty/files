# Common options.
(common) {
    # Removes the 'Server' Response header that containers information about the Caddy server.
    # https://futurestud.io/tutorials/caddy-remove-the-server-response-header
    header /* {
        -Server
    }
}

# Redirect http requests to https.
(redirect) {
    @http {
        protocol http
    }
    redir @http https://{host}{uri} permanent
}

(forbidden) {
    # Provide custom URL that returns status 405 "Method not allowed".
    # Then we can conditionally rewrite paths to this URL.
    route {
        status 405 /forbidden
    }
}

# All URLs are only allowed to GET.
#
# Use https://www.htbridge.com/websec/
# to check security of public sites.
(only_allow_get) {
    rewrite {
        if {method} not GET
        to /forbidden
    }
}

(ssl-settings) {
    tls internal  # For internal CA or replace with your certificate settings
    tls {
        protocols tls1.2 tls1.3
    }
}

# Cache static files for 7 days.
(cache-static) {
    @static {
        file
        path *.html *.css *.js *.png *.jpg *.jpeg *.gif *.webp *.svg
    }
    header @static Cache-Control "public, max-age=604800, must-revalidate"
}

# Enable gzip compression to reduce bandwidth usage.
(compression) {
    encode gzip
}

# Rate Limiting: To protect against abuse.
(rate-limit) {
    @api {
        path /api/*
    }
    limit rate 10r/s burst 20 {
        key {remote_host}
    }
}


# CORS setup for cross-origin resource sharing
(cors) {
    header {
        Access-Control-Allow-Origin *
        Access-Control-Allow-Methods "GET, POST, OPTIONS"
        Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range"
        Access-Control-Expose-Headers "Content-Length,Content-Range"
    }
}

# Basic authentication snippet for protected areas
(basic-auth) {
    basicauth /protected/* {
        Bob JDJhJDEwJEVC.5cm9OTJOWEFsdDQ1
    }
}

# Redirect www to non-www
(redirect-www) {
    @www host www.{$DOMAIN}
    redir @www https://{$DOMAIN}{uri}
}

# SSL configuration for strong encryption
(ssl-config) {
    tls {
        protocols tls1.2 tls1.3
        curves x25519 secp384r1
        alpn http/1.1 h2
    }
}

# Handle errors.
(errors) {
    # Additional configurations for handling errors, redirects, etc.
    handle_errors {
        @404 {
            expression {http.error.status_code} == 404
        }
        handle @404 {
            rewrite * /404.html
            file_server
        }
    }
}

# Handle requests to /api/*.
(api) {
    route /api/* {
        uri strip_prefix /api
        reverse_proxy http://localhost:3000
    }
}

# Handle requests to /admin/*.
(admin) {
    route /admin/* {
        uri strip_prefix /admin
        reverse_proxy http://localhost:3001
    }
}

# Handle requests to /.
(home) {
    route / {
        file_server
    }
}

# Handle requests to /static/*.
(static) {
    route /static/* {
        uri strip_prefix /static
        file_server
    }
}

# Handle requests to /favicon.ico.
(favicon) {
    route /favicon.ico {
        file_server
    }
}

# Handle requests to /robots.txt.
(robots) {
    route /robots.txt {
        file_server
    }
}

# Handle requests to /sitemap.xml.
(sitemap) {
    route /sitemap.xml {
        file_server
    }
}

# Handle requests to /humans.txt.
(humans) {
    route /humans.txt {
        file_server
    }
}

# Configure logging.
(logging) {
    log {
        output file /var/log/caddy/access.log {
            roll_size 1mb
            roll_keep 5
            roll_keep_for 24h
        }
    }
}

# Reverse proxy to a backend server using a subdomain.
(subdomain) {
    reverse_proxy sub.domain.com:3000
}

# Redirect www subdomain by removing it.
www.{$DOMAIN:localhost} {
    redir https://{$DOMAIN:localhost}{uri} permanent
}

# Proxied route.
(proxied) {
    # Redirect www subdomain by removing it.
    www.{args[0]}.{$DOMAIN:localhost} {
        redir https://{args[0]}.{$DOMAIN:localhost}{uri} permanent
    }

    http://{args[0]}.{$DOMAIN:localhost}, https://{args[0]}.{$DOMAIN:localhost} {
        import redirect
        import dns
        route {
            import common
            reverse_proxy {args[1]}
        }
    }
}
